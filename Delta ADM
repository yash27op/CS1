%delta mod
clc;
close all;
clear all;

a=2;
t=0:2*pi/50:2*pi;

x=a*sin(t);
l=length(x);
plot(x,'r')
delta=.2;
hold on
xn=0;
for i=1:l
    if x(i)>=xn(i)
        d(i)=1;
        xn(i+1)=xn(i)+delta;
    else
        d(i)=0;
        xn(i+1)=xn(i)-delta;
    end
end

stairs(xn)
hold on
legend('Analog Signal DM with step size=0.2');
title('Delta Modulation');
        

%Adaptive delta modulation
clc;
clear all;
close all;

% Simulation settings
tStart = 0;            % Start time
tStop = 0.002;         % Stop time
Fs = 48 * 10^3;        % Sampling frequency
delta = 0.3;           % Initial value of delta for adaptive delta modulation
SNR = 20;              % Signal-to-Noise Ratio in dB

% Calculate time vector
Ts = 1 / Fs;           % Sampling period
t = tStart : Ts : tStop; % Time vector from start to stop with sampling period Ts

% Generate a message signal with three sinusoidal components and add noise
xt_sig = awgn(sin(2*pi* 1000 * t) + sin(2*pi* 1500 * t) + sin(2*pi* 2000 * t), 20);

% Perform adaptive delta modulation and demodulation
yt_sig = sig_mod_adaptivedelta(xt_sig, delta, 0, 1.2);     % Adaptive Delta Modulation
yr_sig = awgn(yt_sig, SNR);                                % Add white Gaussian noise
xr_sig = sig_demod_adaptivedelta(yr_sig, delta, 0, 1.2);    % Adaptive Delta Demodulation

% Plot results
subplot(2,2,1);
plot(t, xt_sig, 'b');
ylim([-4 4]);
title('Message signal');

subplot(2, 2, 2);
stairs(t, yt_sig);
ylim([-0.5 1.5]);
title('Adaptive Delta modulation bits (Tx)');

subplot(2, 2, 3);
stairs(t, yr_sig);
title('Adaptive Delta modulation bits (Rx)');

subplot(2, 2, 4);
plot(t, xt_sig, 'b');
hold on;
stairs(t, xr_sig, 'r');
ylim([-4 4]);
title('Adaptive Delta demodulated signal comparison (delta = 0.3)');

% Adaptive Delta Demodulation function

function y = sig_demod_adaptivedelta(x, delta, delta_start, delta_change_rate)
    x_old = 0;
    delta_factor = 0;
    y_old = delta_start;
    y = zeros(1, length(x));
    for i = 1 : length(x)
        xd = (x(i) >= 0.5);
        y_old = y_old + delta * sign(xd - 0.5) * (delta_change_rate ^ delta_factor);
        delta_factor = delta_factor + sign((xd == x_old) - 0.5);
        y(i) = y_old;
        x_old = xd;
    end
end

% Adaptive Delta Modulation function
function y = sig_mod_adaptivedelta(x, delta, delta_start, delta_change_rate)
    y_old = 0;
    delta_factor = 0;
    x_old = delta_start;
    y = zeros(1, length(x));
    for i = 1 : length(x)
        y(i) = (x(i) > x_old);
        x_old = x_old + delta * sign(y(i) - 0.5) * (delta_change_rate ^ delta_factor);
        delta_factor = delta_factor + sign((y(i) == y_old) - 0.5);
        y_old = y(i);
    end
end


