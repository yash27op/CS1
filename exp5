uniform pcm

t = 0:0.01:10;
a = sin(t);
[sqnr8, aquan8, code8] = u_pcm(a, 8);
[sqnr16, aquan16, code16] = u_pcm(a, 16);
disp('SQNR for N = 8:');
disp(sqnr8);
disp('SQNR for N = 16:');
disp(sqnr16);
plot(t, a, '-', t, aquan8, '-.', t, aquan16, '-', t, zeros(1, length(t)));
legend('Original Signal', '8 Level Quantized Signal', '16 Level Quantized 
Signal');
title('Signal and Quantized Versions');
xlabel('Time');
ylabel('Amplitude');
function [sqnr, a_quan, code] = u_pcm(a, n)
 amax = max(abs(a));
 a_quan = a / amax;
 b_quan = a_quan;
 d = 2 / n;
 q = d * (0:n-1) - (n-1)/2*d;
 for i = 1:n
 indices = (q(i) - d/2 <= a_quan) & (a_quan <= q(i) + d/2);
 a_quan(indices) = q(i) * ones(1, sum(indices));
 b_quan(a_quan == q(i)) = (i-1) * ones(1, sum(a_quan == q(i)));
 end
 a_quan = a_quan * amax;
 num_bits = ceil(log2(n));
 code = zeros(length(a), num_bits);
 for i = 1:length(a)
 for j = num_bits:-1:0
 if fix(b_quan(i) / 2^j) == 1
 code(i, (num_bits - j) + 1) = 1;
 b_quan(i) = b_quan(i) - 2^j;
 end
 end
 end
 sqnr = 20 * log10(norm(a) / norm(a - a_quan));
end



Non uniform PCM
%% 
%% 
% Algorithm Implementation
function mu_law_quantization()
 % Parameters
 sequence_length = 500;
 mu = 255;
 
 % Generate random variables from N(0,1) distribution
 input_sequence = randn(1, sequence_length);
 
 % Quantization levels
 quantization_levels = [16, 64, 128];
 
 % Plot input-output relation, error, and quantized output for each 
quantization level
 for i = 1:length(quantization_levels)
 
 % Quantize using mu-law nonlinearity
 quantized_sequence = mu_law_quantize(input_sequence, 
quantization_levels(i), mu);
 
 % Plot input-output relation, error, and quantized output
 figure;
 
 % Input-Output Relation
 subplot(2,1,1);
 plot(input_sequence, quantized_sequence, 'o');
 title(['Input-Output Relation - Quantization Levels: ', 
num2str(quantization_levels(i))]);
 xlabel('Input');
 ylabel('Output');
 
 % Error
 error = input_sequence - quantized_sequence;
 subplot(2,1,2);
 plot(1:sequence_length, error, '-');
 title(['Error - Quantization Levels: ', num2str(quantization_levels(i))]);
 xlabel('Sample');
 ylabel('Error');
 
 
 % Determine SQNR
 sqnr = 10 * log10(sum(input_sequence.^2) / sum(error.^2));
 fprintf('SQNR for Quantization Levels %d: %.2f dB\n', 
quantization_levels(i), sqnr);
 end
end
% Mu-law quantization function
function quantized_sequence = mu_law_quantize(input_sequence, num_levels, mu)
 % Normalize input sequence
 input_sequence = input_sequence / max(abs(input_sequence));
 % Mu-law compression
 compressed_sequence = sign(input_sequence) .* log(1 + mu * 
abs(input_sequence)) / log(1 + mu);
 % Quantization
 quantized_sequence = round((num_levels - 1) * (compressed_sequence + 1) / 2);
end
